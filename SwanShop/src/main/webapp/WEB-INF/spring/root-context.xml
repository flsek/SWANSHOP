<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 스프링은 자신이 객체를 생성하고 관리해야 하는 객체들에 대한 설정이 필요함. 이에 대한 설정은 root-context.xml에서 
		함. -->
	<!-- <context:component-scan> 태그의 내용을 통해 관리해야 되는 패키지를 scan하기 시작함. -->

	<!-- DataSource 설정 -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<!-- <property name="driverClassName" value="oracle.jdbc.pool.OracleDataSource"></property> 
			<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:XE"></property> -->
		
		<!-- log4jdbc.log4j2.properties 추가 후 아래 코드로 바꿔주기 -->
		<property name="driverClassName"
			value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<property name="jdbcUrl"
			value="jdbc:log4jdbc:oracle:thin:@localhost:1521:XE"></property>

		<!-- Oracle 11g 경우 value="jdbc:oracle:thin:@URL주소:1521:XE" -->
		<!-- Oracle 19 경우 value="jdbc:oracle:thin:@URL주소:1521:orcl" -->

		<property name="username" value="swanshop"></property>
		<property name="password" value="swanshop"></property>
	</bean>

	<bean id="datasource" class="com.zaxxer.hikari.HikariDataSource"
		destroy-method="close">
		<constructor-arg ref="hikariConfig"></constructor-arg>
	</bean>

	<!-- SQLSessionFactory 설정 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="datasource"/>	
		<property name="configLocation"
			value="classpath:mybatis-config.xml" />
		<!-- classpath는 src/main/resource폴더를 의미함 -->
	</bean>
	
	<!-- <mybatis-spring:scan> 태그의 base-package 속성은 지정된 패키지의 모든 MyBatis 관련 어노테이션을 찾아서 처리 -->
	<mybatis-spring:scan base-package="com.swan.mapper"/>
	
	<!-- model, service 패키지를 스프링에서 인식할 수 있도록  <context:component-scan>태그를 추가 -->
	<context:component-scan base-package="com.swan.model"/>
	<context:component-scan base-package="com.swan.service"/>
	
	<!-- 트랜잭션 기능 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="datasource"></property>
	</bean>
	<!-- 트랜잭션 어노테이션 기능 -->
	<tx:annotation-driven />
	
	<!-- 스케줄링 어노테이션 사용과 추가한 패키지의 클래스들을 스프링이 인식할 수 있도록 함 -->
	<task:annotation-driven/>
    
	<context:component-scan base-package="com.swan.task"/>
	
	<!-- 메일 서버에 계정 인증 후 메일을 전송하는 방법 -->
	<!-- navermail설정 -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"> 
     <property name="host" value="smtp.naver.com"/> <!-- 메이서버 호스트 -->
     <property name="port" value="465"/> <!-- 메일 서버 포트번호 -->
     <property name="username" value="자신의 이메일 아이디"/> <!-- 자신의 이메일 아이디 -->
     <property name="password" value="자신의 비밀번호"/> <!-- 자신의 비밀번호 -->
       <!-- 보안연결 SSL과 관련된 설정 -->
     <property name="javaMailProperties">
      <props>
      <prop key="mail.smtp.auth">true</prop>
      <prop key="mail.smtp.starttls.enable">true</prop>
      <prop key="mail.smtps.checkserveridentity">true</prop>
      <prop key="mail.smtps.ssl.trust">*</prop>
      <prop key="mail.debug">true</prop>
      <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
      </props>
     </property>
    </bean>
</beans>
